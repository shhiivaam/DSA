class Solution {
    public:
     vector<int> result;
    bool found = false;
    vector<int> nums;
    int n, k;
    vector<vector<bool>> visited;
    void dfs(int mask, int mod, vector<int>& path) {
        if (found) return;
        
        if (mask == (1 << n) - 1) {
            if (mod == 0) {
                result = path;
                found = true;
            }
            return;
        }
        
        if (visited[mask][mod]) return;
        visited[mask][mod] = true;
        
        for (int i = 0; i < n; ++i) {
            if (!(mask & (1 << i))) {
                int newMod = mod;
                int len = to_string(nums[i]).size();
                newMod = (newMod * (int)pow(10, len) % k + nums[i] % k) % k;
                
                path.push_back(nums[i]);
                dfs(mask | (1 << i), newMod, path);
                path.pop_back();
            }
        }
    }
    
public:
    vector<int> concatenatedDivisibility(vector<int>& quenlorvax, int k) {
        nums = quenlorvax; 
        this->k = k;
        n = nums.size();
        sort(nums.begin(), nums.end()); 
        visited.assign(1 << n, vector<bool>(k, false));
        vector<int> path;
        dfs(0, 0, path);
        return result;
    }
};
