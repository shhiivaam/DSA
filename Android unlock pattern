#include <iostream>
#include <vector>
using namespace std;

int skip[10][10];
bool visited[10];

int dfs(int curr, int remaining) {
    if (remaining == 0) return 1;
    visited[curr] = true;
    int res = 0;
    for (int next = 1; next <= 9; ++next) {
        int s = skip[curr][next];
        if (!visited[next] && (s == 0 || visited[s])) {
            res += dfs(next, remaining - 1);
        }
    }
    visited[curr] = false;
    return res;
}

int numberOfPatterns(int n) {
    // Initialize skip matrix
    skip[1][3] = skip[3][1] = 2;
    skip[1][7] = skip[7][1] = 4;
    skip[3][9] = skip[9][3] = 6;
    skip[7][9] = skip[9][7] = 8;
    skip[1][9] = skip[9][1] = skip[2][8] = skip[8][2] = 
    skip[3][7] = skip[7][3] = skip[4][6] = skip[6][4] = 5;

    int res = 0;
    for (int len = n; len <= n; ++len) {
        res += dfs(1, len - 1) * 4; // corners
        res += dfs(2, len - 1) * 4; // edges
        res += dfs(5, len - 1);     // center
    }
    return res;
}

int main() {
    int n;
    cin >> n;
    cout << numberOfPatterns(n) << endl;
    return 0;
}
