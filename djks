#include <iostream>
#include <vector>
#include <queue>
using namespace std;

void dijkstra(int src, vector<vector<pair<int,int>>>& gp, vector<int>& dist) {
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    dist[src] = 0;
    pq.push({0, src});
    
    while(!pq.empty()) {
        int dis = pq.top().first;
        int node = pq.top().second;
        pq.pop();
        
        for(auto& v : gp[node]) {
            int adjnode = v.first;
            int edgewt = v.second;
            
            if(dis + edgewt < dist[adjnode]) {
                dist[adjnode] = dis + edgewt;
                pq.push({dist[adjnode], adjnode});
            }
        }
    }
}
int main() {
    int n, m;
    cin >> n >> m;
    vector<vector<pair<int,int>>> gp(n);
    
    for(int i = 0; i < m; i++) {
        int a, b, d;
        cin >> a >> b >> d;
        gp[a].push_back({b, d});
        gp[b].push_back({a, d});
    }
    
    vector<int> dist(n, 1e9);
    dijkstra(0, gp, dist);
   int i=0;
   for(auto v: dist){
       cout<<i++<<": "<<v<<endl;
   }
}
