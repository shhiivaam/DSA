#include<bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
int NoOfPaths(int i, int j,int n, int m,vector<vector<int>>&mtx,vector<vector<int>>&dp){
if(i == n-1 && j == m-1) return 1;
if(i >= n || j >= m || mtx[i][j] == 1 ) return 0;
if(dp[i][j] != -1 ) return dp[i][j];
int down,right=0;

down = NoOfPaths(i+1,j,n,m,mtx,dp);
right = NoOfPaths(i,j+1,n,m,mtx,dp);

return dp[i][j] = down + right;
}
void solve(){
	int n,m;
	cin>>n>>m;
	vector<vector<int>>mtx(n,vector<int>(m));
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			cin>>mtx[i][j];
		}
	}
	// vector<vector<int>>dp(n,vector<int>(m,-1));
	// cout<<NoOfPaths(0,0,n,m,mtx,dp)<<endl;
	int dp[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (mtx[i][j] == 1) {
                dp[i][j] = 0;
            } 
            else if (i == 0 && j == 0) {
                dp[i][j] = 1;
            } 
            else {
                int up = 0, left = 0;
                if (i > 0) up = dp[i-1][j];
                if (j > 0) left = dp[i][j-1];
                dp[i][j] = (up + left) % mod;
            }
        }
    }
    cout<<dp[n-1][m-1] << endl;
}
int main(){
	int t;
	cin>>t;
	while(t--)
	 solve();
}
