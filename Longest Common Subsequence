class Solution {
public:
    int lcs(string &s1, string &s2, int m, int n, vector<vector<int>> &dp) {
        if (m == 0 || n == 0)
            return 0;
        
        if (dp[m][n] != -1)
            return dp[m][n];

        if (s1[m - 1] == s2[n - 1])
            dp[m][n] = 1 + lcs(s1, s2, m - 1, n - 1, dp);
        else
            dp[m][n] = max(lcs(s1, s2, m - 1, n, dp), lcs(s1, s2, m, n - 1, dp));
        
        return dp[m][n];
    }

    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, -1));
        return lcs(text1, text2, n, m, dp);
    }
};
