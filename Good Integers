class Solution {
    public:
        long long countGoodIntegers(int n, int k) {
        long long base = pow(10,n - 1);
        long long range=pow(10,n)-1;
        vector<long long>arr;
    for(int i=base;i<=range;i++){
         if(isPalindrome(i)){
          arr.push_back(i);
         }
     }
     int cnt=0;
     for(int i=0;i<arr.size();i++){
        if(arr[i]%k == 0){
           cnt++;
        }else{
            if(iSPermuteIspalindrome(arr[i],k)) cnt++;
        }
    } 
    return cnt;  
    }
    private:
    bool isPalindrome(int n){
        long long mod=4e9+7;
        long long  num=n;
        long long ans=0;
        while(num > 0){
            long long ld=num%10;
            ans =(ans*10)%mod+ld;
            num=num/10;
        }
       if(ans != n) return 0;
       else return 1;
    }
bool iSPermuteIspalindrome(long long num, int k) {
        string s = to_string(num);
        sort(s.begin(), s.end());
    do {
        int num =stoll(s);
        if (num % k == 0) {
            return 1;
            break;
        }
    } while (next_permutation(s.begin(),s.end()));
      return 0;
    }     
};
