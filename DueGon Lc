#include <bits/stdc++.h>
using namespace std;
 int go(int i, int j, int n, int m, vector<vector<int>>& dungeon, vector<vector<int>>& dp) {
        if (i >= n || j >= m) return 1e9;
        if (i == n - 1 && j == m - 1) {
            return max(1, 1 - dungeon[i][j]);
        }
        if (dp[i][j] != -1) return dp[i][j];
        int down = go(i + 1, j, n, m, dungeon, dp);
        int right = go(i, j + 1, n, m, dungeon, dp);
        int need = min(down, right) - dungeon[i][j];
        return dp[i][j] = max(1, need); 
    }
void sol(){
	int n, m;
    cin >> n >> m;
    vector<vector<int>> mtx(n, vector<int>(m));
    vector<vector<int>> dp(n, vector<int>(m, -1));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> mtx[i][j];
        }
    }
    int ans = go(0, 0, n, m, mtx, dp);
    cout << ans << "\n";
}
int main(){
	cin.tie(0);cout.tie(0);
    int t=1;
    //cin>>t;
    while(t--){
        sol();
    }
}
