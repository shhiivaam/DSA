class Solution {
public:
    bool isSafe(vector<vector<char>>& board,int row,int col ,char dig)
    {
        //horizontal
        for(int i=0;i<9;i++)
        {
            if(board[row][i] == dig)
            return false;
        }
        //vertical
        for(int i=0;i<9;i++)
        {
            if(board[i][col] == dig)
            return false;
        }
        //3*3
        int srow=(row/3)*3;
        int scol=(col/3)*3;
        for(int i=srow;i<=srow+2;i++)
        {
          for(int j=scol;j<=scol+2;j++){    
            if(board[i][j] == dig)
            return false;
          }
        }
     return true;   
    }
    bool helper(vector<vector<char>>& board,int row,int col)
    {
        if(row == 9){
            return true;
        }
        int nxtRow=row;
        int nxtCol=col+1;
        if(nxtCol == 9)
        {
            nxtRow=row+1;
            nxtCol=0;
        }
        if(board[row][col] != '.')
        {
            return helper(board,nxtRow,nxtCol);
        }
        //placing digit
        for(char dg='1';dg<='9';dg++){
            if(isSafe(board,row,col,dg)){
                board [row][col]=dg;
                if(helper(board,nxtRow,nxtCol)){
                return true;
                }
                board[row][col]='.';
            }      
        }    
        return false;
    }
    void solveSudoku(vector<vector<char>>& board) {
        helper(board,0,0);
    }
};
