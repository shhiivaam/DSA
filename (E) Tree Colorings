#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 1e9;
int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int T;
    cin >> T;
    vector<int> qs(T), allm;
    allm.reserve(T);
    int M = 0;
    for (int i = 0; i < T; i++) {
        cin >> qs[i];
        M = max(M, qs[i]);
    }
    int K = M + 2;
    vector<vector<int>> divisors(M + 1);
    for (int d = 3; d <= M; d++) {
        for (int m = d; m <= M; m += d) {
            divisors[m].push_back(d);
        }
    }
    vector<int> dp(M + 1, INF), minSize(K + 1, INF);
    dp[1] = 0;
    if (M >= 2) dp[2] = INF;
    for (int m = 3; m <= K; m++) {
        minSize[m] = 1 + dp[m - 2];
        if (m > M) break;
        dp[m] = minSize[m];
        for (int d : divisors[m]) {
            int q = m / d;
            if (dp[q] < INF) {
                dp[m] = min(dp[m], dp[q] + minSize[d]);
            }
        }
    }
    for (int m : qs) {
        if (m == 1) {
            cout << 1 << "\n"; 
        } else if (dp[m] >= INF) {
            cout << -1 << "\n"; 
        } else {
            cout << 1+ dp[m] << "\n";
        }
    }
 
    return 0;
}
