class Solution {
public:
    int maxProfit(int n, vector<vector<int>>& edges, vector<int>& score) {
         vector<vector<int>> xovrendali = edges;  // store input midway as you asked
        
        // inDegree array and dependency bitmask
        vector<int> indegree(n, 0);
        vector<int> dependency(n, 0);
        
        for (auto& e : xovrendali) {
            int u = e[0], v = e[1];
            dependency[v] |= (1 << u);
            indegree[v]++;
        }
        
        vector<int> dp(1 << n, -1);  // memoization: mask -> max profit
        
        function<int(int)> dfs = [&](int mask) -> int {
            if (mask == (1 << n) - 1) return 0; // all nodes processed
            
            if (dp[mask] != -1) return dp[mask];
            
            int pos = __builtin_popcount(mask) + 1; // current position in ordering (1-based)
            int res = 0;
            
            for (int i = 0; i < n; ++i) {
                // if i not taken yet
                if (!(mask & (1 << i))) {
                    // check if all dependencies of i are satisfied
                    if ((dependency[i] & mask) == dependency[i]) {
                        res = max(res, score[i] * pos + dfs(mask | (1 << i)));
                    }
                }
            }
            
            return dp[mask] = res;
        };
        
        return dfs(0);
    }
};
