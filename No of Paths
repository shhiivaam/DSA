#include <bits/stdc++.h>
using namespace std;

const int mod = 1e9 + 7;
int n, m;

int rec(int i, int j, vector<vector<int>>& mtx, int k, vector<vector<vector<int>>>& dp) {
    if (i >= n || j >= m || i < 0 || j < 0) return 0;
    if (i == n - 1 && j == m - 1) {
        if (mtx[i][j] == 1 && k == 0) return 0;
        return 1;
    }
    if (mtx[i][j] == 1 && k <= 0) return 0;

    if (dp[i][j][k] != -1) return dp[i][j][k];
    int down = 0, right = 0;
    if (mtx[i][j] == 1 && k > 0) {
        down = rec(i + 1, j, mtx, k - 1, dp) % mod;
        right = rec(i, j + 1, mtx, k - 1, dp) % mod;
    } else {
        down = rec(i + 1, j, mtx, k, dp) % mod;
        right = rec(i, j + 1, mtx, k, dp) % mod;
    }
    return dp[i][j][k] = (down + right) % mod;
}
void solve() {
    int k;
    cin >> n >> m >> k;
    vector<vector<int>> mtx(n, vector<int>(m));
    for (int i = 0; i < n; i++) 
        for (int j = 0; j < m; j++) 
            cin >> mtx[i][j];

    if (mtx[0][0] == 1 && k == 0) {
        cout << 0 << '\n';
        return;
    }
    vector<vector<vector<int>>> dp(n, vector<vecto r<int>>(m, vector<int>(k + 1, -1)));
    cout << rec(0, 0, mtx, k, dp) << '\n';
}
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int t;
    cin >> t;
    while (t--) solve();
}
